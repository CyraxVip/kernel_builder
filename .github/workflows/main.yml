name: Building kernel

on: # [push]
#  release:
#    types: [published]
#  push:
#    branches:
#      - master
#    paths:
#      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      COMPILER:
        description: 'compilers used'
        required: true
        default: 'Neutron-Clang'
      KBRANCH:
        description: 'kernel branch'
        required: true
        default: 'thirteen'
      NOTES:
        description: 'notes to print out'
        required: false
        default: ''

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  REPO: TelegramAt25/android_kernel_xiaomi_selene
  RUN_NUM: ${{ github.run_number }}_${{ github.run_attempt }}
  KERNEL_BRANCH: ${{ github.event.inputs.KBRANCH }}
  NOTE: ${{ github.event.inputs.NOTES }}
  COMPILERS: ${{ github.event.inputs.COMPILER }}
  TZ: Asia/Ho_Chi_Minh

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest

    steps:
        - name: checkout
          uses: actions/checkout@master
        - name: start of workflow
          run: |
            bash tg_utils.sh msg "gh $RUN_NUM: workflow started"
        - name: init build env
          run: |
            dnf groupinstall "Development tools" -y
            dnf install llvm lld bc bison ca-certificates curl flex glibc-devel.i686 glibc-devel binutils-devel openssl python3 python2 zstd clang gcc-arm-linux-gnu dtc libxml2 libarchive openssl-devel tomsfastmath-devel wget xz -y
            ln -sf "/usr/bin/python3" /usr/bin/python
        - name: show host info
          run: |
            bash tg_utils.sh msg "gh $RUN_NUM: build env initialized"
            bash tg_utils.sh msg "gh $RUN_NUM: host: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2)%nlgh $RUN_NUM: free disk space: $(df --sync -BM --output=avail / | grep -v Avail)"
        - name: print notes if exists
          run: |
            if [[ ! -z $NOTE ]]; then
              bash tg_utils.sh msg "gh $RUN_NUM: $NOTE"
            fi
        - name: clone kernel source
          run: |
            bash tg_utils.sh msg "gh $RUN_NUM: cloning kernel source%nlgh $RUN_NUM: repo: $REPO%nlgh $RUN_NUM: branch: $KERNEL_BRANCH"
            git clone --depth=1 https://github.com/$REPO -b $KERNEL_BRANCH kernel
        - name: run compilation scripts
          run: |
            cd kernel
            bash ../tg_utils.sh msg "gh $RUN_NUM: running compilation script(s): $COMPILERS"
            bash ../build.sh "$COMPILERS"
        - name: upload
          run: |
            cd kernel
            for file in $(find . -maxdepth 1 -name '*.zip'); do
              bash ../tg_utils.sh up "${file}" "$(cat "${file}.info")"
            done
            for file in $(find . -maxdepth 1 -name '*.log'); do
              if [[ -e "error_${file}.info" ]]; do
                bash ../tg_utils.sh up "${file}" "$(cat "error_${file}.info")"
              fi
            done
        - name: if it fails
          if: ${{ failure() }}
          run: |
            bash tg_utils.sh msg "gh $RUN_NUM: workflow failed"
        - name: end of workflow
          run: |
            bash tg_utils.sh msg "gh $RUN_NUM: workflow ended"

